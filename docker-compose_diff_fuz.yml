version: '3'
services:
  generator:
    image: registry.statemind.io/vyper-fuzzer-generator:v0.1.6
    command:
      - python3.10
      - generators/run_diff.py
      - /corpus
    networks:
      - db
      - queue_opt_gas
      - queue_opt_codesize
    environment:
      PYTHONPATH: /app
    depends_on:
      - mongodb
      - queue_adder
      - queue_nagini
    volumes:
      - corpus:/corpus
      - ./docker/config_nagini_vs_adder.yml:/app/config.yml

  # compiler 0
  queue_adder:
    image: rabbitmq:management
    networks:
      - queue_opt_gas
    ports:
      - "15672:15672"
  runner_adder:
    deploy:
      replicas: 3
    restart: always
    image: registry.statemind.io/vyper-fuzzer-generator:v0.1.6
    environment:
      PYTHONPATH: /app
      SERVICE_NAME: adder
    depends_on:
      - mongodb
      - queue_adder
    command:
      - python3.10
      - runners/runner_diff.py
    networks:
      - db
      - queue_opt_gas
    volumes:
      - ./docker/config_nagini_vs_adder.yml:/app/config.yml

  # compiler 1
  queue_nagini:
    image: rabbitmq:management
    networks:
      - queue_opt_codesize
    ports:
      - "15673:15672"
  runner_nagini:
    deploy:
      replicas: 3
    restart: always
    image: registry.statemind.io/vyper-fuzzer-generator:v0.1.6-nagini
    environment:
      PYTHONPATH: /app
      SERVICE_NAME: nagini
    depends_on:
      - mongodb
      - queue_nagini
    command:
      - python3.10
      - runners/runner_diff.py
    networks:
      - db
      - queue_opt_codesize
    volumes:
      - ./docker/config_nagini_vs_adder.yml:/app/config.yml
  verifier:
    image: registry.statemind.io/vyper-fuzzer-generator:v0.1.6
    environment:
      PYTHONPATH: /app
    depends_on:
      - mongodb
    command:
      - python3.10
      - verifiers/simple_verifier.py
    networks:
      - db
    volumes:
      - ./docker/config_nagini_vs_adder.yml:/app/config.yml

  mongodb:
    image: mongo
    networks:
      - db
    ports:
      - "27017:27017"
    volumes:
      - db:/data/db

networks:
  db:
    driver: bridge
  queue_opt_gas:
    driver: bridge
  queue_opt_codesize:
    driver: bridge

volumes:
  db:
  corpus:
  # TODO: come up with queues' volumes to not lose it in case of a failure
